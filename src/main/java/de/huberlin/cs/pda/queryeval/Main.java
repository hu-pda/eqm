package de.huberlin.cs.pda.queryeval;

import com.espertech.esper.client.deploy.DeploymentException;
import com.espertech.esper.client.deploy.ParseException;
import de.huberlin.cs.pda.queryeval.comparators.Comparator;
import de.huberlin.cs.pda.queryeval.comparators.LastEventComparator;
import de.huberlin.cs.pda.queryeval.comparators.FullComparator;
import de.huberlin.cs.pda.queryeval.esper.*;
import de.huberlin.cs.pda.queryeval.esper.event.Event;
import joptsimple.OptionException;
import joptsimple.OptionParser;
import joptsimple.OptionSet;
import joptsimple.OptionSpec;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;


public class Main {


    public static void main(String [] args) throws IOException, ParseException, DeploymentException, InterruptedException
    {
        OptionParser parser = new OptionParser();

        OptionSpec<String> datasetOption
                = parser.accepts("dataset", "Choose a dataset  [dublin|google-cluster|debs2015|nasdaq] on which to run the queries.")
                .withRequiredArg()
                .required()
                .ofType(String.class);

        OptionSpec<File> eplFileOption
                = parser.accepts("epl-file", "The .epl File containing the queries.")
                .withRequiredArg()
                .required()
                .ofType(File.class);

        OptionSpec<String> baseQueryOption
                = parser.accepts("base-query", "The name of the query in the .epl File that constitutes the ground truth for evaluation.")
                .withRequiredArg()
                .required()
                .ofType(String.class);

        OptionSpec<String> evaluatedQueryOption
                = parser.accepts("evaluated-query", "The name of the query in the .epl File that is to be evaluated.")
                .withRequiredArg()
                .required()
                .ofType(String.class);

        OptionSpec<String> comparatorOption
                = parser.accepts("comparator", "Choose a comparator [full|last-event]. The chosen comparator determines when a match generated by the evaluated query counts as equal to a match of the base query. 'full' requires all events of a match to be the same. 'lastEvent' only requires the last events of two matches to be the same.")
                .withRequiredArg()
                .required()
                .ofType(String.class);

        OptionSpec<File> saveDirOption
                = parser.accepts("save-dir", "Folder to save the traces, plots etc.")
                .withRequiredArg()
                .required()
                .ofType(File.class);

        OptionSpec<Void> help
                = parser.acceptsAll(Arrays.asList("h", "help", "?"), "Show help")
                .forHelp();

        try {
            OptionSet options = parser.parse(args);

            if (options.has(help)) {
                parser.printHelpOn(System.out);
                return;
            }

            String dataset = datasetOption.value(options);
            File eplFile = eplFileOption.value(options);
            String baseQuery = baseQueryOption.value(options);
            String evaluatedQuery = evaluatedQueryOption.value(options);
            String comparatorString = comparatorOption.value(options);
            File saveDir = saveDirOption.value(options);

            Comparator comparator;
            switch (comparatorString) {
                case "full":
                    comparator = new FullComparator();
                    break;
                case "last-event":
                    comparator = new LastEventComparator();
                    break;
                default:
                    System.out.println("Choose a dataset [full|last-event]");
                    return;
            }


            /***********************************************************************************
             *
             * 1. Generate query results using Esper
             *
             ***********************************************************************************/
            ProcessData dataProcessing;
            File datasetFile;
            switch (dataset) {
                case "dublin":
                    dataProcessing = new ProcessDublinData();
                    datasetFile = new File("");
                    break;
                case "google-cluster":
                    dataProcessing = new ProcessGoogleClusterData();
                    datasetFile = new File("/media/ntfs/0_Semesterarbeit/Datensaetze/google_cluster_data/task_events/part-00005-of-00500.csv.gz");
                    break;
                case "debs2015":
                    dataProcessing = new ProcessDEBS2015Data();
                    datasetFile = new File("");
                    break;
                case "nasdaq":  // nasdaq
                    dataProcessing = new ProcessNasdaqData();
                    datasetFile = new File("");
                    break;
                default:
                    System.out.println("Choose a dataset [dublin|google-cluster|debs2015|nasdaq]");
                    return;
            }
            long startingTimeBase = 0L;
            Map<String, List<Map<String, Event>>> queryMatches = dataProcessing.run(datasetFile, eplFile, startingTimeBase);
            dataProcessing.write(queryMatches, saveDir);
            //System.out.println(queryMatches);

            List<Map<String, Event>> baseQueryMatches = queryMatches.get(baseQuery);
            List<Map<String, Event>> evaluatedQueryMatches = queryMatches.get(evaluatedQuery);

            System.out.println(evaluatedQueryMatches);

            /***********************************************************************************
             *
             * 2. Compare query results with a given comparator
             *
             ***********************************************************************************/
            Evaluator eval = new Evaluator(baseQueryMatches, evaluatedQueryMatches, comparator);
            EvalData results = eval.evaluate();

            System.out.println(results.getResults());

            /***********************************************************************************
             *
             * 3. Plot the results
             *
             ***********************************************************************************/


        }
        catch(OptionException e){
            parser.printHelpOn(System.out);
        }


    }
}
